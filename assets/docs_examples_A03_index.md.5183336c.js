import{o as n,c as s,e as a}from"./app.1312ad2f.js";const t='{"title":"Async/Await 是对 Promise 的进一步简化，让程序看起来像是同步运行一样","description":"","frontmatter":{},"relativePath":"docs/examples/A03/README.md","lastUpdated":1631590646258}',p={},o=[a('<h1 id="async-await-是对-promise-的进一步简化，让程序看起来像是同步运行一样" tabindex="-1">Async/Await 是对 Promise 的进一步简化，让程序看起来像是同步运行一样 <a class="header-anchor" href="#async-await-是对-promise-的进一步简化，让程序看起来像是同步运行一样" aria-hidden="true">#</a></h1><ol start="0"><li>@swtc/lib 已内置支持 promise， 下面是对 jingtum-lib 操作</li><li>工作于 playground 目录</li><li>安装 jingtum-lib 和 bluebird</li></ol><div class="language-bash"><pre><code>$ <span class="token function">npm</span> <span class="token function">install</span> jingtum-lib\n$ <span class="token function">npm</span> <span class="token function">install</span> bluebird\n</code></pre></div><ol start="3"><li>async/await</li></ol><div class="language-javascript"><pre><code><span class="token keyword">const</span> <span class="token constant">JLIB</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;jingtum-lib&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token constant">BLUEBIRD</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;bluebird&quot;</span><span class="token punctuation">)</span>\n<span class="token constant">BLUEBIRD</span><span class="token punctuation">.</span><span class="token function">promisifyAll</span><span class="token punctuation">(</span><span class="token constant">JLIB</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> Remote <span class="token operator">=</span> <span class="token constant">JLIB</span><span class="token punctuation">.</span>Remote\n<span class="token keyword">const</span> remote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 我们现在对于每个有回调的函数就拥有相应的Async函数, 最常见</span>\n<span class="token comment">// await必须运行于async函数中</span>\n<span class="token keyword">var</span> <span class="token function-variable function">someFunction</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> server_info <span class="token operator">=</span> <span class="token keyword">await</span> remote<span class="token punctuation">.</span><span class="token function">connectAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 此处等待返回结果，看起来像是同步，但不阻塞</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>server_info<span class="token punctuation">)</span>\n    <span class="token comment">// 此时已经连接到服务器了</span>\n    <span class="token keyword">let</span> ledger_data <span class="token operator">=</span> <span class="token keyword">await</span> remote<span class="token punctuation">.</span><span class="token function">requestLedger</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 此处等待返回结果</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ledger_data<span class="token punctuation">)</span>\n    remote<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 运行</span>\n<span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div>',5)];p.render=function(a,t,p,c,e,l){return n(),s("div",null,o)};export{t as __pageData,p as default};
