import{o as s,c as a,e as n}from"./app.d26c9b00.js";const e='{"title":"模块支持","description":"","frontmatter":{},"headers":[{"level":2,"title":"模块支持","slug":"模块支持"}],"relativePath":"docs/examples/A01/README.md","lastUpdated":1631590646222}',t={},o=[n('<h2 id="模块支持" tabindex="-1">模块支持 <a class="header-anchor" href="#模块支持" aria-hidden="true">#</a></h2><ol><li>node.js 长期以来支持的是 commonjs 模块系统，使用 require 导入</li></ol><div class="language-bash"><pre><code>$ node\n</code></pre></div><div class="language-javascript"><pre><code><span class="token operator">&gt;</span> <span class="token keyword">var</span> Wallet <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@swtc/lib&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Wallet\n<span class="token operator">&gt;</span> <span class="token keyword">var</span> Remote <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@swtc/lib&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Remote\n</code></pre></div><ol start="2"><li>node.js 目前对于 ES 标准的 esm 模块原生支持还不好，最方便的是通过 esm 模块来使用</li></ol><div class="language-bash"><pre><code>$ node -r esm\n</code></pre></div><div class="language-javascript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Wallet<span class="token punctuation">,</span> Remote <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@swtc/lib&quot;</span>\n</code></pre></div>',7)];t.render=function(n,e,t,p,c,l){return s(),a("div",null,o)};export{e as __pageData,t as default};
